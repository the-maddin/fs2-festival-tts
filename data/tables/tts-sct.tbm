#Conditional Hooks

$Application: FS2_Open
$On Game Init: [

local lua_socket = require("socket")
ftts = {

    -- client for festival    
    sock = lua_socket.connect("localhost",1314),
    
    -- handles for later
    voice = nil,
    buf = nil,
    stream = nil,
    
    -- feature#MULTIVOICE beginnings
    -- will put in here other senders
    -- will make this more modular
    voicetbl = {
        ["Command"] = "cmu_us_slt_cg",
        [""] = "cmu_us_awb_cg",
        -- lol that guy sounds like ...
        
    },
    
    -- check if message is not voice acted
    match_override = function (filename)
        for i = 1, #tb.SimulatedSpeechOverrides do
            if filename:find(tb.SimulatedSpeechOverrides[i]) then
                return tb.SimulatedSpeechOverrides[i]
            end
        end
        return nil
    end,
    
    
    
-- uncomment this to turn on debug message socket
-- you'll need a server listening on port 1315
-- e.g. "netcat -l 1315" or define another debug function
    --debug = true,
}

-- make client nonblocking
ftts.sock:settimeout(0)
-- load durations
ftts.sock:send([[(load "/usr/share/festival/mrpa_durs.scm")]])

if ftts.debug then
    local sock_out = lua_socket.connect("localhost", 1315)
    ftts.debug = function (x) sock_out:send(tostring(x) .. "\n") end
    
    -- what socket does our voice client use
    -- will get interesting for feature#SPLITMSG
    local _,port = ftts.sock:getsockname()
    ftts.debug("Festival socket 1 port:")
    ftts.debug(port)

end
]

$Application: FS2_Open
$On Message Received: [

-- speak message only where no voice acting is present
local fv = hv.MessageHandle.VoiceFile
if not fv:isValid() or ftts.match_override(fv.Filename) then

    -- set the voice according to sender (feature#MULTIVOICE), set tempo
    if ftts.debug then ftts.debug("Sender: " .. hv.SenderString) end
    ftts.voice = ftts.voicetbl[hv.SenderString] or ftts.voicetbl[""]
    ftts.sock:send([[(voice_]] .. ftts.voice .. [[)
                     (Param.set 'Duration_Stretch 0.8)
                     (Param.set 'Duration_Method 'Averages)
                    ]])
 
    -- build the sexp, setting volume to match retail VA
    ftts.sock:send( [[(let ((utt (Utterance Text "]] .. hv.Message .. [[")))
                        (begin
                          (utt.synth utt)
                          (utt.wave.rescale utt 6)
                          (utt.send.wave.client utt )))
                     ]])
                          
                        -- create test double output (paste in Scheme block)
                        --(utt.save.wave utt "/tmp/festival.wav")
    if ftts.debug then ftts.debug("Msg:\n" .. hv.Message:sub(1,10) .. "\n...\n" .. hv.Message:sub(-10)) end
end
]

$Application: FS2_Open
$State: GS_STATE_GAME_PLAY
$On Frame: [

-- ignoring errors, will always timeout
local _,_,recv = ftts.sock:receive("*a")

-- most frames will get empty string, ignore, also errors & voice change confirmations
if recv and (recv ~= "") and ftts.voice and (not recv:match(ftts.voice)) then
    -- start buffer, if not present from previous frame
    if not ftts.buf then
        -- but close the old sound first
        if ftts.stream then
            ftts.stream:close()
            ftts.stream = nil
        end
        ftts.buf = {""}
    end
    
    -- behold the format of a one-frame festival response...
    local pro = recv:sub(1,3)
    local wav = recv:sub(4,-59)
    local epi = recv:sub(-58)
    
    -- ... but it may take more than one frame to receive, due to timeout
    -- so it will end & then start in the middle of the wav
    -- so only cut those substrings if they're really useless
    if not pro:match("WV") then
        table.insert(ftts.buf, pro)
    end
    table.insert(ftts.buf, wav)
    if not epi:match("ft_StUfF_keyLP.+") then
        table.insert(ftts.buf, epi)
    end
    
    if ftts.debug then ftts.debug("Prologue ".. pro .. "\nEpilogue: " .. epi) end

    -- if response has epilogue & so is completely received
    -- this leaves the corner case of timeout during epilogue
    -- which will corrupt this & next wav
    -- TBD fix sometime
    if epi:match("ft_StUfF_keyLP.+") then
        -- collect, stream, release
        ftts.stream = ts.openAudioStreamMem(table.concat(ftts.buf), AUDIOSTREAM_VOICE)
        ftts.buf = nil
        
        ftts.stream:play()
    end
end
]

#End
